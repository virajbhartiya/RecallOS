name: Deploy to EC2 (t3.micro Optimized)

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Add EC2 host to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Pre-deployment System Check
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            
            echo "üîç Checking t3.micro system resources..."
            
            # Check available memory
            AVAILABLE_MEM=$(free -m | awk 'NR==2{printf "%.1f", $7/1024}')
            echo "üíæ Available memory: ${AVAILABLE_MEM}GB"
            
            # Check disk space
            AVAILABLE_DISK=$(df -h / | awk 'NR==2{print $4}')
            echo "üíø Available disk space: ${AVAILABLE_DISK}"
            
            # Check current CPU usage
            CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}')
            echo "‚ö° Current CPU usage: ${CPU_USAGE}%"
            
            # Check if we have enough resources for deployment
            if (( $(echo "$AVAILABLE_MEM < 0.2" | bc -l) )); then
              echo "‚ö†Ô∏è  Warning: Low memory available (${AVAILABLE_MEM}GB)"
            fi
          EOF

      - name: Pre-deployment backup
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            
            echo "üíæ Creating optimized backup for t3.micro..."
            
            cd ${{ secrets.PROJECT_PATH }}
            
            # Create backup directory if it doesn't exist
            mkdir -p ../backups
            
            # Create lightweight backup (exclude node_modules and dist)
            BACKUP_NAME="backup-$(date +%Y%m%d-%H%M%S)"
            mkdir -p "../backups/$BACKUP_NAME"
            
            # Copy essential files only to save space
            rsync -av --exclude='node_modules' --exclude='dist' --exclude='logs' --exclude='.git' . "../backups/$BACKUP_NAME/"
            
            echo "‚úÖ Lightweight backup created: $BACKUP_NAME"
            
            # Keep only last 3 backups (reduced for t3.micro disk space)
            cd ../backups
            ls -t | tail -n +4 | xargs -r rm -rf
            
            echo "üßπ Cleaned old backups, keeping last 3"
          EOF

      - name: Deploy to EC2 with t3.micro Optimizations
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            
            echo "üöÄ Starting t3.micro optimized deployment..."
            
            # Check Node.js and npm versions
            echo "üîç Checking Node.js and npm versions..."
            node --version
            npm --version
            
            # Upgrade Node.js to LTS version if needed
            echo "üîÑ Checking Node.js version compatibility..."
            NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
            if [ "$NODE_VERSION" -lt 20 ]; then
              echo "‚ö†Ô∏è  Node.js v$NODE_VERSION detected, upgrading to Node.js v20 LTS..."
              
              # Install Node.js v20 using NodeSource repository
              curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -
              sudo yum install -y nodejs
              
              # Verify the upgrade
              echo "‚úÖ Node.js upgraded to:"
              node --version
              npm --version
            else
              echo "‚úÖ Node.js v$NODE_VERSION is compatible"
            fi
            
            # Update npm to compatible version for current Node.js
            echo "üîÑ Updating npm to compatible version..."
            NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
            if [ "$NODE_VERSION" -ge 20 ]; then
              echo "‚úÖ Node.js v20+ detected, updating to latest npm..."
              sudo npm install -g npm@latest
            else
              echo "‚ö†Ô∏è  Node.js v18 detected, updating to compatible npm version..."
              sudo npm install -g npm@10.8.2
            fi
            npm --version
            
            # Pre-check for problematic packages
            echo "üîç Pre-checking for problematic packages..."
            if ! npm view acorn@8.15.0 > /dev/null 2>&1; then
              echo "‚ö†Ô∏è  Warning: acorn@8.15.0 not available, will use fallback installation"
            else
              echo "‚úÖ acorn@8.15.0 is available"
            fi
            
            # Navigate to project directory
            cd ${{ secrets.PROJECT_PATH }}
            
            # Store current commit for potential rollback
            CURRENT_COMMIT=$(git rev-parse HEAD 2>/dev/null || echo "unknown")
            echo "üìç Current commit: $CURRENT_COMMIT"
            
            # Pull latest changes for the correct branch
            echo "üì• Pulling latest changes from ${{ github.ref_name }}..."
            git fetch origin
            git reset --hard origin/${{ github.ref_name }}
            
            NEW_COMMIT=$(git rev-parse HEAD)
            echo "üìç New commit: $NEW_COMMIT"
            
            # Gracefully stop PM2 processes to free memory for build
            echo "‚èπÔ∏è  Gracefully stopping PM2 processes..."
            pm2 stop recallos-api 2>/dev/null || true
            sleep 5
            
            # Clear some memory before build
            echo "üßπ Clearing memory caches..."
            sync && echo 3 | sudo tee /proc/sys/vm/drop_caches > /dev/null || true
            
            # Install dependencies with memory optimization and registry fallback
            echo "üì¶ Installing dependencies with memory optimization..."
            export NODE_OPTIONS="--max-old-space-size=512"
            
            # Clear npm cache and set registry
            npm cache clean --force
            npm config set registry https://registry.npmjs.org/
            
            # Try multiple installation strategies
            if [ -f "package-lock.json" ]; then
              echo "üîß Attempting npm ci with fallback..."
              if ! npm ci --prefer-offline --no-audit --no-fund; then
                echo "‚ö†Ô∏è  npm ci failed, trying npm install..."
                echo "üìã npm ci error details:"
                npm ci --prefer-offline --no-audit --no-fund 2>&1 | head -20
                if ! npm install --prefer-offline --no-audit --no-fund; then
                  echo "‚ö†Ô∏è  npm install failed, trying with --legacy-peer-deps..."
                  echo "üìã npm install error details:"
                  npm install --prefer-offline --no-audit --no-fund 2>&1 | head -20
                  npm install --legacy-peer-deps --prefer-offline --no-audit --no-fund
                fi
              fi
            else
              echo "üîß Attempting npm install with fallback..."
              if ! npm install --prefer-offline --no-audit --no-fund; then
                echo "‚ö†Ô∏è  npm install failed, trying with --legacy-peer-deps..."
                echo "üìã npm install error details:"
                npm install --prefer-offline --no-audit --no-fund 2>&1 | head -20
                npm install --legacy-peer-deps --prefer-offline --no-audit --no-fund
              fi
            fi
            
            # Build with memory constraints for t3.micro
            echo "üî® Building with t3.micro memory constraints..."
            NODE_OPTIONS="--max-old-space-size=512" npm run build
            
            # Run debug script if available
            if [ -f "scripts/debug-npm.sh" ]; then
              echo "üîç Running npm debug script..."
              chmod +x scripts/debug-npm.sh
              ./scripts/debug-npm.sh
            fi
            
            # Run Node.js upgrade script if needed
            if [ -f "scripts/upgrade-nodejs.sh" ]; then
              echo "üîÑ Running Node.js upgrade script..."
              chmod +x scripts/upgrade-nodejs.sh
              ./scripts/upgrade-nodejs.sh
            fi
            
            # Check if build was successful
            if [ ! -d "dist" ]; then
              echo "‚ùå Build failed - dist directory not found"
              exit 1
            fi
            
            # Clean up dev dependencies to save space and memory
            echo "üßπ Cleaning up dev dependencies..."
            if [ -f "package-lock.json" ]; then
              npm ci --omit=dev --prefer-offline --no-audit --no-fund
            else
              npm install --omit=dev --prefer-offline --no-audit --no-fund
            fi
            
            # Ensure environment is set to production
            echo "üîß Configuring production environment..."
            if [ -f .env ]; then
              sed -i 's/NODE_ENV=development/NODE_ENV=production/g' .env
              echo "‚úÖ Environment set to production"
            else
              echo "‚ö†Ô∏è  .env file not found, ensure environment variables are configured"
            fi
            
            # Create logs directory
            mkdir -p logs
            
            # Use our optimized deployment script
            echo "üöÄ Starting application with optimized PM2 configuration..."
            if [ -f "ecosystem.config.js" ]; then
              pm2 start ecosystem.config.js --env production
            else
              # Fallback to direct PM2 start with t3.micro optimizations
              pm2 start dist/App.js --name "recallos-api" \
                --max-memory-restart 400M \
                --node-args="--max-old-space-size=512" \
                --instances 1 \
                --exec-mode fork
            fi
            
            # Save PM2 configuration
            pm2 save
            
            echo "‚úÖ Deployment completed successfully!"
          EOF

      - name: Performance Health Check
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "üè• Performing comprehensive health check..."
            
            # Wait for application to start
            sleep 15
            
            # Check if PM2 process is running
            if ! pm2 list | grep -q "recallos-api.*online"; then
              echo "‚ùå Health check failed - Application not running"
              pm2 logs recallos-api --lines 10
              exit 1
            fi
            
            # Check memory usage
            PM2_MEMORY=$(pm2 jlist | jq -r '.[] | select(.name=="recallos-api") | .memory' 2>/dev/null || echo "unknown")
            if [ "$PM2_MEMORY" != "unknown" ]; then
              MEMORY_MB=$((PM2_MEMORY / 1024 / 1024))
              echo "üíæ Application memory usage: ${MEMORY_MB}MB"
              
              if [ $MEMORY_MB -gt 400 ]; then
                echo "‚ö†Ô∏è  Warning: High memory usage (${MEMORY_MB}MB > 400MB)"
              fi
            fi
            
            # Check CPU usage
            CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}')
            echo "‚ö° System CPU usage: ${CPU_USAGE}%"
            
            # Test API endpoint if health check exists
            PORT=$(grep -E '^PORT=' .env 2>/dev/null | cut -d'=' -f2 || echo "8000")
            
            # Basic connectivity test
            if curl -f --max-time 10 http://localhost:${PORT}/api/auth/health 2>/dev/null; then
              echo "‚úÖ API health endpoint responding"
            else
              echo "‚ö†Ô∏è  API health endpoint test skipped or failed"
            fi
            
            # Check rate limiting is working (should get rate limit headers)
            RATE_LIMIT_TEST=$(curl -I http://localhost:${PORT}/api/match/swipe 2>/dev/null | grep -i "x-ratelimit" || echo "Rate limiting headers not found")
            echo "üõ°Ô∏è  Rate limiting: $RATE_LIMIT_TEST"
            
            # Check PM2 status
            echo "üìä PM2 Status:"
            pm2 status
            
            echo "‚úÖ Health check completed!"
          EOF

      - name: Performance Monitoring Setup
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "üìä Setting up performance monitoring for t3.micro..."
            
            cd ${{ secrets.PROJECT_PATH }}
            
            # Create monitoring script using echo statements
            echo '#!/bin/bash' > monitor_performance.sh
            echo 'echo "=== t3.micro Performance Report $(date) ==="' >> monitor_performance.sh
            echo 'echo "ÔøΩÔøΩ Memory Usage:"' >> monitor_performance.sh
            echo 'free -h' >> monitor_performance.sh
            echo 'echo ""' >> monitor_performance.sh
            echo 'echo "‚ö° CPU Usage:"' >> monitor_performance.sh
            echo 'top -bn1 | grep "Cpu(s)"' >> monitor_performance.sh
            echo 'echo ""' >> monitor_performance.sh
            echo 'echo "üöÄ PM2 Status:"' >> monitor_performance.sh
            echo 'pm2 status' >> monitor_performance.sh
            echo 'echo ""' >> monitor_performance.sh
            echo 'echo "üíø Disk Usage:"' >> monitor_performance.sh
            echo 'df -h /' >> monitor_performance.sh
            echo 'echo ""' >> monitor_performance.sh
            echo 'echo "üîó Active Connections:"' >> monitor_performance.sh
            echo 'netstat -an | grep :8000 | wc -l' >> monitor_performance.sh
            echo 'echo "================================"' >> monitor_performance.sh
            
            chmod +x monitor_performance.sh
            
            # Set up PM2 monitoring
            pm2 install pm2-server-monit 2>/dev/null || echo "PM2 monitoring module installation skipped"
            
            echo "üìä Performance monitoring configured!"
          EOF

      - name: Deployment Success Notification
        if: success()
        run: |
          echo "üéâ t3.micro optimized deployment completed successfully!"
          echo "üìä Deployment details:"
          echo "  - Repository: ${{ github.repository }}"
          echo "  - Branch: ${{ github.ref_name }}"
          echo "  - Commit: ${{ github.sha }}"
          echo "  - Actor: ${{ github.actor }}"
          echo "  - Optimizations: Rate limiting, Caching, Memory limits, Production mode"
          echo ""
          echo "üîß Post-deployment commands:"
          echo "  - Monitor: ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'pm2 monit'"
          echo "  - Logs: ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'pm2 logs recallos-api'"
          echo "  - Performance: ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'cd ${{ secrets.PROJECT_PATH }} && ./monitor_performance.sh'"

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "üîÑ Deployment failed, attempting optimized rollback..."
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            
            cd ${{ secrets.PROJECT_PATH }}
            
            # Stop current processes to free memory
            pm2 stop all || true
            pm2 delete all || true
            
            # Find the latest backup
            LATEST_BACKUP=$(ls -t ../backups/ | head -n 1)
            
            if [ -n "$LATEST_BACKUP" ]; then
              echo "üîÑ Rolling back to backup: $LATEST_BACKUP"
              
              # Clear current directory
              rm -rf ./* .env 2>/dev/null || true
              
              # Restore from backup
              cp -r "../backups/$LATEST_BACKUP/"* .
              cp "../backups/$LATEST_BACKUP/.env" . 2>/dev/null || true
              
              # Reinstall dependencies with memory optimization and registry fallback
              export NODE_OPTIONS="--max-old-space-size=512"
              
              # Check Node.js version and update npm if needed
              NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
              if [ "$NODE_VERSION" -lt 20 ]; then
                echo "‚ö†Ô∏è  Node.js v$NODE_VERSION detected during rollback, using compatible npm..."
                sudo npm install -g npm@10.8.2
              fi
              
              # Clear npm cache and set registry
              npm cache clean --force
              npm config set registry https://registry.npmjs.org/
              
              # Try multiple installation strategies
              echo "üîß Attempting npm ci with fallback during rollback..."
              if ! npm ci --omit=dev --prefer-offline --no-audit --no-fund; then
                echo "‚ö†Ô∏è  npm ci failed, trying npm install..."
                if ! npm install --omit=dev --prefer-offline --no-audit --no-fund; then
                  echo "‚ö†Ô∏è  npm install failed, trying with --legacy-peer-deps..."
                  npm install --omit=dev --legacy-peer-deps --prefer-offline --no-audit --no-fund
                fi
              fi
              
              # Rebuild if needed
              if [ ! -d "dist" ]; then
                npm run build
              fi
              
              # Restart with optimized configuration
              if [ -f "ecosystem.config.js" ]; then
                pm2 start ecosystem.config.js --env production
              else
                pm2 start dist/App.js --name "recallos-api" \
                  --max-memory-restart 400M \
                  --node-args="--max-old-space-size=512" \
                  --instances 1 \
                  --exec-mode fork
              fi
              
              pm2 save
              
              echo "‚úÖ Rollback completed"
            else
              echo "‚ùå No backup found for rollback"
              exit 1
            fi
          EOF

          echo "‚ùå Deployment failed and rollback completed!"
          exit 1